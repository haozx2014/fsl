#!/bin/sh

#   siena - Structural Image Evaluation, including Normalisation, of Atrophy
#
#   Stephen Smith, FMRIB Image Analysis Group
#
#   Copyright (C) 1999-2006 University of Oxford
#
#   Part of FSL - FMRIB's Software Library
#   http://www.fmrib.ox.ac.uk/fsl
#   fsl@fmrib.ox.ac.uk
#   
#   Developed at FMRIB (Oxford Centre for Functional Magnetic Resonance
#   Imaging of the Brain), Department of Clinical Neurology, Oxford
#   University, Oxford, UK
#   
#   
#   LICENCE
#   
#   FMRIB Software Library, Release 3.3 (c) 2006, The University of
#   Oxford (the "Software")
#   
#   The Software remains the property of the University of Oxford ("the
#   University").
#   
#   The Software is distributed "AS IS" under this Licence solely for
#   non-commercial use in the hope that it will be useful, but in order
#   that the University as a charitable foundation protects its assets for
#   the benefit of its educational and research purposes, the University
#   makes clear that no condition is made or to be implied, nor is any
#   warranty given or to be implied, as to the accuracy of the Software,
#   or that it will be suitable for any particular purpose or for use
#   under any specific conditions. Furthermore, the University disclaims
#   all responsibility for the use which is made of the Software. It
#   further disclaims any liability for the outcomes arising from using
#   the Software.
#   
#   The Licensee agrees to indemnify the University and hold the
#   University harmless from and against any and all claims, damages and
#   liabilities asserted by third parties (including claims for
#   negligence) which arise directly or indirectly from the use of the
#   Software or the sale of any products based on the Software.
#   
#   No part of the Software may be reproduced, modified, transmitted or
#   transferred in any form or by any means, electronic or mechanical,
#   without the express permission of the University. The permission of
#   the University is not required if the said reproduction, modification,
#   transmission or transference is done without financial return, the
#   conditions of this Licence are imposed upon the receiver of the
#   product, and all original and amended source code is included in any
#   transmitted product. You may be held legally responsible for any
#   copyright infringement that is caused or encouraged by your failure to
#   abide by these terms and conditions.
#   
#   You are not permitted under this Licence to use this Software
#   commercially. Use for which any financial return is received shall be
#   defined as commercial use, and includes (1) integration of all or part
#   of the source code or the Software into a product for sale or license
#   by or on behalf of Licensee to third parties or (2) use of the
#   Software or any derivative of it for research with the final aim of
#   developing software products for sale or license to a third party or
#   (3) use of the Software or any derivative of it for research with the
#   final aim of developing non-software products for sale or license to a
#   third party, or (4) use of the Software to provide any service to an
#   external organisation for which payment is received. If you are
#   interested in using the Software commercially, please contact Isis
#   Innovation Limited ("Isis"), the technology transfer company of the
#   University, to negotiate a licence. Contact details are:
#   innovation@isis.ox.ac.uk quoting reference DE/1112.

Usage() {
    echo ""
    echo "Usage: siena <input1_fileroot> <input2_fileroot> [-d] [-B \"bet options\"] [-2] [-t2] [-m] [-t <t>] [-b <b>] [-S \"siena_diff options\"]"
    echo ""
    echo "-d                    : debug (don't delete intermediate files)"
    echo "-B \"betopts\"          : options to pass to BET brain extraction (inside double-quotes), e.g. -B \"-f 0.3\""
    echo "-2                    : two-class segmentation (don't segment grey and white matter separately)"
    echo "-t2                   : T2-weighted input image (default T1-weighted)"
    echo "-m                    : use standard-space masking as well as BET"
    echo "-t <t>                : ignore from t (mm) upwards in MNI152/Talairach space"
    echo "-b <b>                : ignore from b (mm) downwards in MNI152/Talairach space; b should probably be -ve"
    echo "-S \"sienadiffopts\"    : options to pass to siena_diff timepoint differencing (inside double-quotes), e.g. -S \"-s -i 20\""
    echo ""
    exit
}

if [ _$FSLDIR = _ ] ; then
    FSLDIR=/usr/local/fsl
    export FSLDIR
fi

[ "$2" = "" ] && Usage
[ `${FSLDIR}/bin/imtest $1` = 0 ] && Usage
[ `${FSLDIR}/bin/imtest $2` = 0 ] && Usage
A=`${FSLDIR}/bin/remove_ext $1`
B=`${FSLDIR}/bin/remove_ext $2`

echo "-----------------------------------------------------------------------" >  ${A}_to_${B}.siena
echo ""                                                                        >> ${A}_to_${B}.siena
echo " SIENA - Structural Image Evaluation, using Normalisation, of Atrophy"   >> ${A}_to_${B}.siena
echo " part of FSL www.fmrib.ox.ac.uk/fsl"                                     >> ${A}_to_${B}.siena
echo " running longitudinal atrophy measurement: siena version 2.4"            >> ${A}_to_${B}.siena
echo " siena $@"                                                               >> ${A}_to_${B}.siena
echo ""                                                                        >> ${A}_to_${B}.siena

shift 2


debug=0
betopts=""
sdopts=""
sdo="-m"
dostd=0
stdmask=0
stdroi=""
origin3=37 # `avwval ${FSLDIR}/etc/standard/avg152T1 origin3`
pixdim3=2  # `avwval ${FSLDIR}/etc/standard/avg152T1 pixdim3`

while [ _$1 != _ ] ; do

    if [ $1 = -d ] ; then
        debug=1
        ov=-ov
        shift
    elif [ $1 = -B ] ; then
        betopts=$2
        shift 2
    elif [ $1 = -S ] ; then
        sdopts=$2
        shift 2
    elif [ $1 = -2 ] ; then
	sdo="$sdo -2"
        shift
    elif [ $1 = -t2 ] ; then
	is_t2=" -s -t2"
        shift
    elif [ $1 = -m ] ; then
	stdmask=1
	dostd=1
        shift
    elif [ $1 = -t ] ; then
	dostd=1
	stdt=`echo $2 | sed 's/-/_/g'`
	stdt=`echo "10 k $stdt $pixdim3 / $origin3 + p" | dc -`
	stdroi="$stdroi -roi 0 1000000 0 1000000 0 $stdt 0 1"
	shift 2
    elif [ $1 = -b ] ; then
	dostd=1
	stdb=`echo $2 | sed 's/-/_/g'`
	stdb=`echo "10 k $stdb $pixdim3 / $origin3 + p" | dc -`
	stdroi="$stdroi -roi 0 1000000 0 1000000 $stdb 1000000 0 1"
	shift 2
    else
	Usage
    fi

done

sdo="${sdo}${is_t2}"

echo "----------  extract brain  --------------------------------------------" >> ${A}_to_${B}.siena
${FSLDIR}/bin/bet $A ${A}_brain -s -m $betopts >> ${A}_to_${B}.siena
${FSLDIR}/bin/bet $B ${B}_brain -s -m $betopts >> ${A}_to_${B}.siena
${FSLDIR}/bin/avwmaths++ ${A}_brain -sub `$FSLDIR/bin/avwstats++ ${A}_brain -p 0` -mas ${A}_brain_mask ${A}_brain -odt float
${FSLDIR}/bin/avwmaths++ ${B}_brain -sub `$FSLDIR/bin/avwstats++ ${B}_brain -p 0` -mas ${B}_brain_mask ${B}_brain -odt float

echo ""                                                                        >> ${A}_to_${B}.siena
echo "----------  register brains and skulls  -------------------------------" >> ${A}_to_${B}.siena
echo "(do not worry about histogram warnings)"                                 >> ${A}_to_${B}.siena
${FSLDIR}/bin/siena_flirt $A $B >> ${A}_to_${B}.siena 2>&1

echo ""                                                                        >> ${A}_to_${B}.siena
echo "----------  produce valid masks  --------------------------------------" >> ${A}_to_${B}.siena
XDIM=`${FSLDIR}/bin/avwval $A dim1` ; XDIM=`echo "$XDIM 2 - p" | dc -`
YDIM=`${FSLDIR}/bin/avwval $A dim2` ; YDIM=`echo "$YDIM 2 - p" | dc -`
ZDIM=`${FSLDIR}/bin/avwval $A dim3` ; ZDIM=`echo "$ZDIM 2 - p" | dc -`
${FSLDIR}/bin/avwmaths ${A}_brain_mask -mul 0 -add 1 -roi 1 $XDIM 1 $YDIM 1 $ZDIM 0 1 ${A}_valid_mask
XDIM=`${FSLDIR}/bin/avwval $B dim1` ; XDIM=`echo "$XDIM 2 - p" | dc -`
YDIM=`${FSLDIR}/bin/avwval $B dim2` ; YDIM=`echo "$YDIM 2 - p" | dc -`
ZDIM=`${FSLDIR}/bin/avwval $B dim3` ; ZDIM=`echo "$ZDIM 2 - p" | dc -`
${FSLDIR}/bin/avwmaths ${B}_brain_mask -mul 0 -add 1 -roi 1 $XDIM 1 $YDIM 1 $ZDIM 0 1 ${B}_valid_mask
${FSLDIR}/bin/flirt -in ${B}_valid_mask -ref $A -out ${B}_valid_mask_to_${A} -applyxfm -init ${B}_to_${A}.mat -paddingsize 0
${FSLDIR}/bin/flirt -in ${A}_valid_mask -ref $B -out ${A}_valid_mask_to_${B} -applyxfm -init ${A}_to_${B}.mat -paddingsize 0
${FSLDIR}/bin/avwmaths ${A}_valid_mask -mul ${B}_valid_mask_to_${A} ${A}_valid_mask_with_$B
${FSLDIR}/bin/avwmaths ${B}_valid_mask -mul ${A}_valid_mask_to_${B} ${B}_valid_mask_with_$A

if [ $dostd = 1 ] ; then
    echo ""                                                                        >> ${A}_to_${B}.siena
    echo "----------  standard space masking  ----------------------------------" >> ${A}_to_${B}.siena
    ${FSLDIR}/bin/flirt -ref ${FSLDIR}/etc/standard/avg152T1_brain -in ${A}_brain -omat ${A}_to_std.mat >> ${A}_to_${B}.siena
    ${FSLDIR}/bin/flirt -ref ${FSLDIR}/etc/standard/avg152T1_brain -in ${B}_brain -omat ${B}_to_std.mat >> ${A}_to_${B}.siena
    ${FSLDIR}/bin/convert_xfm -inverse -omat ${A}_to_std_inv.mat ${A}_to_std.mat
    ${FSLDIR}/bin/convert_xfm -inverse -omat ${B}_to_std_inv.mat ${B}_to_std.mat

    ${FSLDIR}/bin/convert_xfm -concat ${B}_to_std_inv.mat -omat ${A}_to_${B}_tmp.mat ${A}_to_std.mat
    RMSDIFF=`${FSLDIR}/bin/rmsdiff ${A}_to_${B}.mat ${A}_to_${B}_tmp.mat $A | sed 's/\..*$/ /g'` # last part makes it integer
    echo "rmsdiff for standard space transform is $RMSDIFF mm" >> ${A}_to_${B}.siena
    if [ $RMSDIFF -ge 10 ] ; then
	echo "Warning! Probably failed consistency check for standard-space registrations!"
	echo "Warning! Probably failed consistency check for standard-space registrations!" >> ${A}_to_${B}.siena
    fi

    if [ $stdmask = 1 ] ; then
	${FSLDIR}/bin/flirt -in ${FSLDIR}/etc/standard/avg152T1_brain_mask_dil2 -ref $A -out ${A}_stdmask -applyxfm -init ${A}_to_std_inv.mat
	${FSLDIR}/bin/flirt -in ${FSLDIR}/etc/standard/avg152T1_brain_mask_dil2 -ref $B -out ${B}_stdmask -applyxfm -init ${B}_to_std_inv.mat
	${FSLDIR}/bin/avwmaths ${A}_stdmask -thr 0.5 -bin ${A}_stdmask
	${FSLDIR}/bin/avwmaths ${B}_stdmask -thr 0.5 -bin ${B}_stdmask
	${FSLDIR}/bin/avwmaths ${A}_brain_mask -mas ${A}_stdmask ${A}_brain_mask
	${FSLDIR}/bin/avwmaths ${B}_brain_mask -mas ${B}_stdmask ${B}_brain_mask
    fi

    if [ "$stdroi" != "" ] ; then
	${FSLDIR}/bin/avwmaths ${FSLDIR}/etc/standard/avg152T1_brain_mask -mul 0 -add 1 $stdroi ${A}_and_${B}_stdmask
	${FSLDIR}/bin/flirt -in ${A}_and_${B}_stdmask -ref $A -out ${A}_stdmask -applyxfm -init ${A}_to_std_inv.mat
	${FSLDIR}/bin/flirt -in ${A}_and_${B}_stdmask -ref $B -out ${B}_stdmask -applyxfm -init ${B}_to_std_inv.mat
	${FSLDIR}/bin/avwmaths ${A}_stdmask -thr 0.5 -bin ${A}_stdmask
	${FSLDIR}/bin/avwmaths ${B}_stdmask -thr 0.5 -bin ${B}_stdmask
	${FSLDIR}/bin/avwmaths ${A}_valid_mask_with_$B -mul ${A}_stdmask ${A}_valid_mask_with_$B
	${FSLDIR}/bin/avwmaths ${B}_valid_mask_with_$A -mul ${B}_stdmask ${B}_valid_mask_with_$A
    fi
fi

echo ""                                                                        >> ${A}_to_${B}.siena
echo "----------  change analysis  ------------------------------------------" >> ${A}_to_${B}.siena
corr1=`${FSLDIR}/bin/siena_cal $A $B 1.002 $sdo $sdopts`
corr2=`${FSLDIR}/bin/siena_cal $B $A 1.002 $sdo $sdopts`
corr=`echo "10 k $corr1 $corr2 + 2.0 / p" | dc -`
echo "corr1=$corr1 corr2=$corr2 corr=$corr" >> ${A}_to_${B}.siena

echo "" >> ${A}_to_${B}.siena
${FSLDIR}/bin/siena_diff ${B} ${A} -c $corr $sdo $sdopts >> ${A}_to_${B}.siena
pbvc_backward=`grep PBVC ${A}_to_${B}.siena | tail -1 | awk '{print $2}' | sed 's/-/_/g'`

echo "" >> ${A}_to_${B}.siena
${FSLDIR}/bin/siena_diff ${A} ${B} -c $corr $sdo $sdopts >> ${A}_to_${B}.siena
pbvc_forward=`grep PBVC ${A}_to_${B}.siena | tail -1 | awk '{print $2}' | sed 's/-/_/g'`

echo "" >> ${A}_to_${B}.siena
pbvc_average=`echo "10 k $pbvc_forward $pbvc_backward - 2.0 / p" | dc -`
echo "finalPBVC $pbvc_average %" >> ${A}_to_${B}.siena

${FSLDIR}/bin/avwmaths ${A}_to_${B}_flow -mul -1 ${A}_to_${B}_flowneg
${FSLDIR}/bin/overlay 0 0 ${A}_halfwayto_${B} -a ${A}_to_${B}_flow 0.01 1 ${A}_to_${B}_flowneg 0.01 1 ${A}_halfwayto_${B}_render

if [ $debug = 0 ] ; then
    $FSLDIR/bin/imrm ${A}_brain.* ${A}_brain_mask.* ${A}_brain_skull.* \
	${B}_brain.* ${B}_brain_mask.* ${B}_brain_skull.* \
	${A}_halfwayto_${B}.* ${A}_halfwayto_${B}_mask.* \
	${B}_halfwayto_${A}.* ${B}_halfwayto_${A}_mask.* \
	${A}_halfwayto_${B}_stdmask.* \
	${B}_halfwayto_${A}_stdmask.* \
	${A}_halfwayto_${B}_brain.* \
	${A}_halfwayto_${B}_brain_seg.* \
	${A}_to_${B}_flowneg.* \
	${B}_halfwayto_${A}_brain.* \
	${B}_halfwayto_${A}_brain_seg.* \
	${B}_to_${A}_flowneg.* \
	${A}_stdmask.* ${B}_stdmask.* \
	${A}_and_${B}_stdmask.* \
	${A}_valid_mask.* ${B}_valid_mask.* ${A}_valid_mask_to_${B}.* ${B}_valid_mask_to_${A}.* ${A}_valid_mask_with_$B.* ${B}_valid_mask_with_$A.* ${A}_halfwayto_${B}_valid_mask.* ${B}_halfwayto_${A}_valid_mask.*
    /bin/rm -f ${A}_to_std_inv.mat ${B}_to_std_inv.mat ${A}_to_${B}_tmp.mat \
	${A}_halfwayto_${B}_brain.vol ${B}_halfwayto_${A}_brain.vol \
	${B}_to_${A}.mat_avscale
fi

echo "$pbvc_average"

