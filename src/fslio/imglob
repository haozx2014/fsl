#!/usr/bin/python
#   imglob - expand list of image filenames
#   Stephen Smith, Mark Jenkinson and Matthew Webster FMRIB Image Analysis Group
#   Copyright (C) 2009 University of Oxford 
#   Part of FSL - FMRIB's Software Library
#   http://www.fmrib.ox.ac.uk/fsl
#   fsl@fmrib.ox.ac.uk
#   
#   Developed at FMRIB (Oxford Centre for Functional Magnetic Resonance
#   Imaging of the Brain), Department of Clinical Neurology, Oxford
#   University, Oxford, UK
#   
#   
#   LICENCE
#   
#   FMRIB Software Library, Release 5.0 (c) 2012, The University of
#   Oxford (the "Software")
#   
#   The Software remains the property of the University of Oxford ("the
#   University").
#   
#   The Software is distributed "AS IS" under this Licence solely for
#   non-commercial use in the hope that it will be useful, but in order
#   that the University as a charitable foundation protects its assets for
#   the benefit of its educational and research purposes, the University
#   makes clear that no condition is made or to be implied, nor is any
#   warranty given or to be implied, as to the accuracy of the Software,
#   or that it will be suitable for any particular purpose or for use
#   under any specific conditions. Furthermore, the University disclaims
#   all responsibility for the use which is made of the Software. It
#   further disclaims any liability for the outcomes arising from using
#   the Software.
#   
#   The Licensee agrees to indemnify the University and hold the
#   University harmless from and against any and all claims, damages and
#   liabilities asserted by third parties (including claims for
#   negligence) which arise directly or indirectly from the use of the
#   Software or the sale of any products based on the Software.
#   
#   No part of the Software may be reproduced, modified, transmitted or
#   transferred in any form or by any means, electronic or mechanical,
#   without the express permission of the University. The permission of
#   the University is not required if the said reproduction, modification,
#   transmission or transference is done without financial return, the
#   conditions of this Licence are imposed upon the receiver of the
#   product, and all original and amended source code is included in any
#   transmitted product. You may be held legally responsible for any
#   copyright infringement that is caused or encouraged by your failure to
#   abide by these terms and conditions.
#   
#   You are not permitted under this Licence to use this Software
#   commercially. Use for which any financial return is received shall be
#   defined as commercial use, and includes (1) integration of all or part
#   of the source code or the Software into a product for sale or license
#   by or on behalf of Licensee to third parties or (2) use of the
#   Software or any derivative of it for research with the final aim of
#   developing software products for sale or license to a third party or
#   (3) use of the Software or any derivative of it for research with the
#   final aim of developing non-software products for sale or license to a
#   third party, or (4) use of the Software to provide any service to an
#   external organisation for which payment is received. If you are
#   interested in using the Software commercially, please contact Isis
#   Innovation Limited ("Isis"), the technology transfer company of the
#   University, to negotiate a licence. Contact details are:
#   innovation@isis.ox.ac.uk quoting reference DE/9564.

import sys
import os
setAvailable=True
if sys.version_info < (2, 4):
   import sets
   from sets import Set
   setAvailable=False

def usage():
    print "Usage: $0 [-extension/extensions/missing] <list of names>"
    print "       -extension for one image with full extension"
    print "       -extensions for image list with full extensions"
    print "       -missing for a list of names with no corresponding file"
    sys.exit(1)

def removeExt(input):
    output=input.replace(".nii.gz","")    
    output=output.replace(".nii","")
    output=output.replace(".hdr.gz","")
    output=output.replace(".hdr","")
    output=output.replace(".img.gz","")
    output=output.replace(".img","")
    return output


if len(sys.argv) <= 1:
    usage()

deleteExtensions=True
singleImage=True;
findMissing=False;
startingArg=1

if sys.argv[1] == "-extensions":
   singleImage=False
   deleteExtensions=False
   startingArg=2
if sys.argv[1] == "-extension":
   deleteExtensions=False
   startingArg=2
if sys.argv[1] == "-missing":
   findMissing=True
   startingArg=2
    
filelist=[]
badlist=[]

for arg in range(startingArg, len(sys.argv)):
   output=removeExt(sys.argv[arg])
   if os.path.exists(output+".nii"):
      filelist.append(output+".nii")
   if os.path.exists(output+".nii.gz"):
      filelist.append(output+".nii.gz")
   if os.path.exists(output+".hdr"):
      filelist.append(output+".hdr")
   if os.path.exists(output+".hdr.gz"):
      filelist.append(output+".hdr.gz")
   if os.path.exists(output+".img.gz") and not singleImage:        
      filelist.append(output+".img.gz")
   if os.path.exists(output+".img") and not singleImage:        
      filelist.append(output+".img")
   if (not os.path.exists(output+".nii") and not os.path.exists(output+".nii.gz") and not os.path.exists(output+".hdr") and not os.path.exists(output+".hdr.gz") and not ( os.path.exists(output+".img.gz") and not singleImage ) and not ( os.path.exists(output+".img") and not singleImage )):
      badlist.append(output)

if findMissing:
   filelist=badlist

if deleteExtensions:
    for file in range(0, len(filelist)):
        filelist[file]=removeExt(filelist[file])
if setAvailable:
   filelist=list(set(filelist))
else:
   filelist=list(Set(filelist))
filelist.sort()


for file in range(0, len(filelist)):
    print filelist[file],
    if file < len(filelist)-1:
       print " ",

if len(badlist) > 0:
   sys.exit(1)
sys.exit(0)
